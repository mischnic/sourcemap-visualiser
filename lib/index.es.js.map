{"mappings":"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","sources":["components/source-selector.tsx","components/mapping-tree.tsx","components/source-preview.tsx","utils/color.ts","components/sourcemap.tsx","utils/decode-map.ts","components/visualizer.tsx"],"names":["SourceSelector","props","sources","selectedSource","onSelect","_preactCompat","createElement","className","map","s","i","shortSourceName","path","basename","dirname","name","classNames","bg-gray-700","onClick","key","MappingTree","mappings","hoveredMapping","onHoverMapping","selectedMapping","onSelectMapping","mapping","underline","bg-blue-200","onMouseEnter","onMouseLeave","originalLine","originalColumn","generatedLine","generatedColumn","SourcePreview","source","generated","renderableMappings","React","useMemo","result","currColumn","currValue","value","mappingIndex","char","content","currLine","length","push","currMapping","generatedFragment","m","nextMapping","parts","lines","split","currChar","c","line","slice","lineNumberWidth","toString","lastMappingColor","Fragment","concat","style","width","x","backgroundColor","colors","color","hex","indexOf","Error","parseInt","$c51439f5e67eb55943b2691e38bb1$export$invertColor","darken","cursor-pointer","text-gray-600","SourceMap","sourcemap","selectedSourceIndex","setSelectedSourceIndex","useState","setHoveredMapping","setSelectedMapping","decodedMappings","names","decoded","decode","currentLine","hasSource","hasName","sourceIndex","$ada5de318a6802fffdd64d8db0451aea$export$decodeMap","filteredMappings","filter","sort","a","b","Number","MAX_VALUE","$ee3d74f6e79f21f01c0175a6eb684b0$export$default","$a1ad58d78714a80d607458ff1284$export$default","$ab019b5e469be385ec9fba10c304d9c$export$default","Visualizer","sourcemapContent","selectedSourceMapIndex","setSelectedSourceMapIndex","selectedSourceMap","id","onChange","e","target","v","$f261465a66cddafa656e175f2d440$export$default"],"version":3,"file":"index.es.js.map","sourcesContent":["import React from \"preact/compat\";\nimport path from \"path\";\nimport classNames from \"classnames\";\n\nimport { SourceType } from \"../types\";\n\nexport type Props = {\n  sources: Array<SourceType>;\n  selectedSource: number;\n  onSelect: (selected: number) => any;\n};\n\nexport default function SourceSelector(props: Props) {\n  let { sources, selectedSource, onSelect } = props;\n\n  return (\n    <div className=\"h-full bg-gray-800 overflow-y-auto\">\n      <div className=\"font-medium text-white p-2 bg-gray-600\">Sources</div>\n      <div className=\"overflow-y-auto\">\n        {sources.map((s, i) => {\n          let shortSourceName =\n            path.basename(path.dirname(s.name)) + \"/\" + path.basename(s.name);\n\n          return (\n            <div\n              className={classNames(\n                \"whitespace-no-wrap text-white px-2 py-1 hover:bg-gray-500 cursor-pointer\",\n                {\n                  \"bg-gray-700\": selectedSource === i,\n                }\n              )}\n              onClick={() => {\n                onSelect(i);\n              }}\n              key={i}\n            >\n              {shortSourceName}\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n","import React from \"preact/compat\";\nimport classNames from \"classnames\";\n\nimport { DecodedMapping } from \"../utils/decode-map\";\n\nexport type Props = {\n  mappings: Array<DecodedMapping>;\n  hoveredMapping: number;\n  onHoverMapping: (mappingIndex: number) => any;\n  selectedMapping: number;\n  onSelectMapping: (mappingIndex: number) => any;\n};\n\nexport default function MappingTree(props: Props) {\n  let {\n    mappings,\n    hoveredMapping,\n    onHoverMapping,\n    selectedMapping,\n    onSelectMapping,\n  } = props;\n\n  return (\n    <div className=\"h-full bg-gray-100 overflow-y-auto\">\n      <div className=\"font-medium text-gray-700 p-2\">Mappings</div>\n      <div>\n        {mappings.map((mapping, i) => {\n          return (\n            <div\n              className={classNames(\n                \"px-2 font-medium text-gray-700 whitespace-no-wrap cursor-pointer\",\n                {\n                  underline: hoveredMapping === i,\n                  \"bg-blue-200\": selectedMapping === i,\n                }\n              )}\n              key={i}\n              onMouseEnter={() => onHoverMapping(i)}\n              onMouseLeave={() => onHoverMapping(-1)}\n              onClick={() => onSelectMapping(i)}\n            >\n              <span>\n                {mapping.originalLine}:{mapping.originalColumn}\n              </span>\n              <span className=\"mx-1\">-</span>\n              <span>\n                {mapping.generatedLine}:{mapping.generatedColumn}\n              </span>\n              {mapping.name && (\n                <span className=\"font-normal text-gray-600 ml-2\">\n                  ({mapping.name})\n                </span>\n              )}\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n","import React from \"preact/compat\";\nimport classNames from \"classnames\";\n// @ts-ignore\nimport colors from \"nice-color-palettes/1000\";\nimport color from \"color\";\n\nimport { SourceType } from \"../types\";\nimport { DecodedMapping } from \"../utils/decode-map\";\nimport { invertColor } from \"../utils/color\";\n\nexport type Props = {\n  source: SourceType;\n  mappings: Array<DecodedMapping>;\n  hoveredMapping: number;\n  onHoverMapping: (mappingIndex: number) => any;\n  selectedMapping: number;\n  onSelectMapping: (mappingIndex: number) => any;\n  generated: string;\n};\n\nexport default function SourcePreview(props: Props) {\n  let {\n    source,\n    mappings,\n    hoveredMapping,\n    onHoverMapping,\n    selectedMapping,\n    onSelectMapping,\n    generated,\n  } = props;\n\n  let renderableMappings = React.useMemo(() => {\n    let result = [[]];\n    let currColumn = 0;\n    let currValue = {\n      value: \"\",\n      mapping: null,\n      mappingIndex: -1,\n    };\n    let i = 0;\n    for (let char of source.content) {\n      let currLine = result.length - 1;\n      if (char === \"\\n\") {\n        if (currValue.value) {\n          result[currLine].push(currValue);\n          currValue = {\n            value: \"\",\n            mapping: null,\n            mappingIndex: -1,\n          };\n        }\n\n        result.push([]);\n        currColumn = 0;\n        continue;\n      }\n\n      let currMapping = mappings[i];\n      if (\n        currMapping.originalLine === currLine &&\n        currMapping.originalColumn === currColumn\n      ) {\n        if (currValue.value) {\n          result[currLine].push(currValue);\n        }\n\n        currValue = {\n          value: \"\",\n          mapping: currMapping,\n          mappingIndex: i,\n        };\n      }\n\n      while (\n        i < mappings.length - 1 &&\n        (currMapping.originalLine < currLine ||\n          (currMapping.originalLine === currLine &&\n            currMapping.originalColumn < currColumn) ||\n          (currMapping.originalLine === currLine &&\n            currMapping.originalColumn === currColumn))\n      ) {\n        i++;\n        currMapping = mappings[i];\n      }\n\n      currValue.value += char;\n\n      currColumn++;\n    }\n\n    return result;\n  }, [source.name]);\n\n  let generatedFragment = React.useMemo(() => {\n    if (selectedMapping < 0) {\n      return null;\n    }\n\n    let m = mappings[selectedMapping];\n    let nextMapping = mappings[selectedMapping + 1];\n    if (nextMapping && nextMapping.generatedLine !== m.generatedLine) {\n      nextMapping = null;\n    }\n    let parts = [\"\", \"\", \"\"];\n    let lines = generated.split(\"\\n\");\n    let currChar = 0;\n    for (let c of lines[m.generatedLine]) {\n      if (currChar < m.generatedColumn) {\n        parts[0] += c;\n      } else if (nextMapping && currChar > nextMapping.generatedColumn) {\n        parts[2] += c;\n      } else {\n        parts[1] += c;\n      }\n\n      currChar++;\n    }\n\n    return {\n      line: m.originalLine,\n      parts: [parts[0].slice(-20), parts[1], parts[2].slice(0, 20)],\n    };\n  }, [selectedMapping]);\n\n  let lines = source.content.split(\"\\n\");\n  let lineNumberWidth = lines.length.toString(10).length + 1;\n  let lastMappingColor = 0;\n  return (\n    <div className=\"w-full h-full flex flex-col font-mono text-sm\">\n      {renderableMappings.map((m, i) => {\n        return (\n          <React.Fragment key={`line-${i}`}>\n            <div className=\"flex flex-row\">\n              <div\n                className=\"text-right px-2 bg-gray-200\"\n                style={{ width: `${lineNumberWidth}rem` }}\n              >\n                {i}\n              </div>\n              <div className=\"px-4 whitespace-pre\">\n                {m.map((map, x) => {\n                  let style: any = {};\n                  if (map.mapping) {\n                    style.backgroundColor =\n                      colors[lastMappingColor % 5000][lastMappingColor % 5];\n                    style.color = invertColor(style.backgroundColor);\n\n                    if (map.mappingIndex > -1) {\n                      if (selectedMapping === map.mappingIndex) {\n                        style.backgroundColor = \"#000000\";\n                        style.color = \"#ffffff\";\n                      } else if (hoveredMapping === map.mappingIndex) {\n                        style.backgroundColor = color(\n                          style.backgroundColor\n                        ).darken(0.25);\n                      }\n                    }\n\n                    lastMappingColor++;\n                  }\n\n                  return (\n                    <span\n                      key={`line-${i}-mapping-${x}`}\n                      className={classNames(\"rounded\", {\n                        \"cursor-pointer\": !!map.mapping,\n                        \"text-gray-600\": !map.mapping,\n                      })}\n                      style={style}\n                      onMouseEnter={() => {\n                        if (map.mappingIndex > -1) {\n                          onHoverMapping(map.mappingIndex);\n                        }\n                      }}\n                      onMouseLeave={() => onHoverMapping(-1)}\n                      onClick={() => {\n                        if (map.mappingIndex > -1) {\n                          onSelectMapping(map.mappingIndex);\n                        }\n                      }}\n                    >\n                      {map.value}\n                    </span>\n                  );\n                })}\n              </div>\n            </div>\n            {generatedFragment && generatedFragment.line === i && (\n              <div className=\"p-2\">\n                <span className=\"text-gray-500\">\n                  {generatedFragment.parts[0]}\n                </span>\n                <span className=\"bg-black text-white\">\n                  {generatedFragment.parts[1] || '[NOT FOUND]'}\n                </span>\n                <span className=\"text-gray-500\">\n                  {generatedFragment.parts[2]}\n                </span>\n              </div>\n            )}\n          </React.Fragment>\n        );\n      })}\n      <div className=\"flex flex-row h-full\">\n        <div\n          className=\"flex px-2 bg-gray-200\"\n          style={{ width: `${lineNumberWidth}rem` }}\n        />\n        <div />\n      </div>\n    </div>\n  );\n}\n","export const invertColor = (hex) => {\n  if (hex.indexOf(\"#\") === 0) {\n    hex = hex.slice(1);\n  }\n\n  // convert 3-digit hex to 6-digits.\n  if (hex.length === 3) {\n    hex = hex[0] + hex[0] + hex[1] + hex[1] + hex[2] + hex[2];\n  }\n\n  if (hex.length !== 6) {\n    throw new Error(\"Invalid HEX color.\");\n  }\n\n  var r = parseInt(hex.slice(0, 2), 16),\n    g = parseInt(hex.slice(2, 4), 16),\n    b = parseInt(hex.slice(4, 6), 16);\n\n  return r * 0.299 + g * 0.587 + b * 0.114 > 186 ? \"#000000\" : \"#FFFFFF\";\n};\n","import React from \"preact/compat\";\n\nimport { decodeMap } from \"../utils/decode-map\";\nimport { SourceMapType } from \"../types\";\nimport SourceSelector from \"./source-selector\";\nimport MappingTree from \"./mapping-tree\";\nimport SourcePreview from \"./source-preview\";\n\n// This is just a variable to be able to sort\n// it's not the best way but it was the easiest way I came up with in 5 secs\nconst MAX_LINE_LENGTH = 10000;\n\nexport type Props = {\n  sourcemap: SourceMapType;\n};\n\nexport default function SourceMap(props: Props) {\n  let { sourcemap } = props;\n  let [selectedSourceIndex, setSelectedSourceIndex] = React.useState(0);\n  let [hoveredMapping, setHoveredMapping] = React.useState(-1);\n  let [selectedMapping, setSelectedMapping] = React.useState(-1);\n  let decodedMappings = React.useMemo(\n    () => decodeMap(sourcemap.mappings, sourcemap.names),\n    [sourcemap.mappings]\n  );\n\n  let filteredMappings = React.useMemo(\n    () =>\n      decodedMappings\n        .filter((m) => {\n          return m.sourceIndex === selectedSourceIndex;\n        })\n        .sort((a, b) => {\n          let aValue =\n            a.originalLine != null\n              ? a.originalLine * MAX_LINE_LENGTH + a.originalColumn\n              : Number.MAX_VALUE;\n          let bValue =\n            b.originalLine != null\n              ? b.originalLine * MAX_LINE_LENGTH + b.originalColumn\n              : Number.MAX_VALUE;\n          return aValue - bValue;\n        }),\n    [selectedSourceIndex]\n  );\n\n  const changeSourceIndex = (i: number) => {\n    setSelectedMapping(-1);\n    setHoveredMapping(-1);\n    setSelectedSourceIndex(i);\n  };\n\n  let selectedSource = sourcemap.sources[selectedSourceIndex];\n  return (\n    <div className=\"h-full min-h-0 flex\">\n      <div className=\"w-1/6\">\n        <SourceSelector\n          selectedSource={selectedSourceIndex}\n          onSelect={changeSourceIndex}\n          sources={sourcemap.sources}\n        />\n      </div>\n      <div className=\"w-4/6 overflow-y-auto\">\n        {selectedSource.content ? (\n          <SourcePreview\n            source={selectedSource}\n            mappings={filteredMappings}\n            hoveredMapping={hoveredMapping}\n            onHoverMapping={setHoveredMapping}\n            selectedMapping={selectedMapping}\n            onSelectMapping={setSelectedMapping}\n            generated={sourcemap.content}\n          />\n        ) : (\n          <div className=\"p-2\">\n            No source content found for {selectedSource.name}\n          </div>\n        )}\n      </div>\n      <div className=\"w-1/6\">\n        <MappingTree\n          mappings={filteredMappings}\n          hoveredMapping={hoveredMapping}\n          onHoverMapping={setHoveredMapping}\n          selectedMapping={selectedMapping}\n          onSelectMapping={setSelectedMapping}\n        />\n      </div>\n    </div>\n  );\n}\n","import { decode } from \"sourcemap-codec\";\n\nexport type DecodedMapping = {\n  generatedLine: number;\n  generatedColumn: number;\n  originalLine: number;\n  originalColumn: number;\n  sourceIndex: number;\n  name?: string;\n};\n\nexport function decodeMap(\n  mappings: string,\n  names: Array<string>\n): Array<DecodedMapping> {\n  let decoded = decode(mappings);\n\n  let currentLine = 0;\n  let result: Array<DecodedMapping> = [];\n  for (let line of decoded) {\n    for (let mapping of line) {\n      let hasSource = mapping.length > 1;\n      let hasName = mapping.length > 4;\n\n      result.push({\n        generatedLine: currentLine,\n        generatedColumn: mapping[0],\n        originalLine: hasSource ? mapping[2] : -1,\n        originalColumn: hasSource ? mapping[3] : -1,\n        sourceIndex: hasSource ? mapping[1] : -1,\n        name: hasName ? names[mapping[4]] : null,\n      });\n    }\n\n    currentLine++;\n  }\n\n  return result;\n}\n","import React from \"preact/compat\";\nimport { SourceMapType } from \"../types\";\nimport SourceMap from \"./sourcemap\";\n\nexport type Props = {\n  sourcemapContent: Array<SourceMapType>;\n};\n\nexport default function Visualizer({ sourcemapContent }: Props) {\n  let [selectedSourceMapIndex, setSelectedSourceMapIndex] = React.useState(0);\n\n  if (sourcemapContent.length > 0) {\n    let selectedSourceMap = sourcemapContent[selectedSourceMapIndex];\n\n    return (\n      <div id=\"sourcemap-visualizer\" className=\"font-sans leading-normal h-full flex flex-col\">\n        <div className=\"bg-gray-700 p-2 flex\">\n          <div className=\"text-white mr-4\">Select Bundle</div>\n          <select\n            className=\"border-none\"\n            onChange={(e) => {\n              setSelectedSourceMapIndex(parseInt(e.target.value, 10));\n            }}\n          >\n            {sourcemapContent.map((v, i) => {\n              return (\n                <option value={i} key={v.name}>\n                  {v.name}\n                </option>\n              );\n            })}\n          </select>\n        </div>\n        <SourceMap sourcemap={selectedSourceMap} />\n      </div>\n    );\n  }\n}\n"]}