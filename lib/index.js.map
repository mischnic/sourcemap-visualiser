{"mappings":"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","sources":["/Users/niklas/Documents/_dev/_git/parcel/sourcemap-visualiser/node_modules/@parcel/scope-hoisting/lib/helpers.js","components/source-selector.tsx","components/mapping-tree.tsx","components/source-preview.tsx","utils/color.ts","components/sourcemap.tsx","utils/decode-map.ts","components/visualizer.tsx"],"names":["$parcel$interopDefault","a","__esModule","default","SourceSelector","props","sources","selectedSource","onSelect","_preactCompat","createElement","className","map","s","i","shortSourceName","path","basename","dirname","name","classNames","bg-gray-700","onClick","key","MappingTree","mappings","hoveredMapping","onHoverMapping","selectedMapping","onSelectMapping","mapping","underline","bg-blue-200","onMouseEnter","onMouseLeave","originalLine","originalColumn","generatedLine","generatedColumn","SourcePreview","source","generated","renderableMappings","React","useMemo","_step","result","currColumn","currValue","value","mappingIndex","_iterator","$f9214768e60851ecdfcc2a27$var$_createForOfIteratorHelper","content","n","done","char","currLine","length","currMapping","push","err","e","f","generatedFragment","m","nextMapping","_step2","parts","currChar","_iterator2","split","c","line","slice","lineNumberWidth","toString","lastMappingColor","Fragment","concat","style","width","x","backgroundColor","colors","color","hex","indexOf","Error","parseInt","$f5c45b9e6657c34f3f3f297ed9145151$export$invertColor","darken","cursor-pointer","text-gray-600","SourceMap","sourcemap","_React$useState2","$ec73d0ab9d68b6dd64b4cd87d2e$var$_slicedToArray","useState","selectedSourceIndex","setSelectedSourceIndex","_React$useState4","setHoveredMapping","_React$useState6","setSelectedMapping","decodedMappings","names","currentLine","$c2699ffe1da9478052cc3481e59059e$var$_createForOfIteratorHelper","decode","hasSource","hasName","sourceIndex","$c2699ffe1da9478052cc3481e59059e$export$decodeMap","filteredMappings","filter","sort","b","Number","MAX_VALUE","$df22d457158df068f6fc346cda67$export$default","$f9214768e60851ecdfcc2a27$export$default","$ef1bf9db4477e3613976db8da8a33$export$default","_ref","sourcemapContent","$a88454a442db4834c487b51f62dec6cb$var$_slicedToArray","selectedSourceMapIndex","setSelectedSourceMapIndex","selectedSourceMap","id","onChange","target","v","$ec73d0ab9d68b6dd64b4cd87d2e$export$default"],"version":3,"file":"index.js.map","sourcesContent":[null,"import React from \"preact/compat\";\nimport path from \"path\";\nimport classNames from \"classnames\";\n\nimport { SourceType } from \"../types\";\n\nexport type Props = {\n  sources: Array<SourceType>;\n  selectedSource: number;\n  onSelect: (selected: number) => any;\n};\n\nexport default function SourceSelector(props: Props) {\n  let { sources, selectedSource, onSelect } = props;\n\n  return (\n    <div className=\"h-full bg-gray-800 overflow-y-auto\">\n      <div className=\"font-medium text-white p-2 bg-gray-600\">Sources</div>\n      <div className=\"overflow-y-auto\">\n        {sources.map((s, i) => {\n          let shortSourceName =\n            path.basename(path.dirname(s.name)) + \"/\" + path.basename(s.name);\n\n          return (\n            <div\n              className={classNames(\n                \"whitespace-no-wrap text-white px-2 py-1 hover:bg-gray-500 cursor-pointer\",\n                {\n                  \"bg-gray-700\": selectedSource === i,\n                }\n              )}\n              onClick={() => {\n                onSelect(i);\n              }}\n              key={i}\n            >\n              {shortSourceName}\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n","import React from \"preact/compat\";\nimport classNames from \"classnames\";\n\nimport { DecodedMapping } from \"../utils/decode-map\";\n\nexport type Props = {\n  mappings: Array<DecodedMapping>;\n  hoveredMapping: number;\n  onHoverMapping: (mappingIndex: number) => any;\n  selectedMapping: number;\n  onSelectMapping: (mappingIndex: number) => any;\n};\n\nexport default function MappingTree(props: Props) {\n  let {\n    mappings,\n    hoveredMapping,\n    onHoverMapping,\n    selectedMapping,\n    onSelectMapping,\n  } = props;\n\n  return (\n    <div className=\"h-full bg-gray-100 overflow-y-auto\">\n      <div className=\"font-medium text-gray-700 p-2\">Mappings</div>\n      <div>\n        {mappings.map((mapping, i) => {\n          return (\n            <div\n              className={classNames(\n                \"px-2 font-medium text-gray-700 whitespace-no-wrap cursor-pointer\",\n                {\n                  underline: hoveredMapping === i,\n                  \"bg-blue-200\": selectedMapping === i,\n                }\n              )}\n              key={i}\n              onMouseEnter={() => onHoverMapping(i)}\n              onMouseLeave={() => onHoverMapping(-1)}\n              onClick={() => onSelectMapping(i)}\n            >\n              <span>\n                {mapping.originalLine}:{mapping.originalColumn}\n              </span>\n              <span className=\"mx-1\">-</span>\n              <span>\n                {mapping.generatedLine}:{mapping.generatedColumn}\n              </span>\n              {mapping.name && (\n                <span className=\"font-normal text-gray-600 ml-2\">\n                  ({mapping.name})\n                </span>\n              )}\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n","import React from \"preact/compat\";\nimport classNames from \"classnames\";\n// @ts-ignore\nimport colors from \"nice-color-palettes/1000\";\nimport color from \"color\";\n\nimport { SourceType } from \"../types\";\nimport { DecodedMapping } from \"../utils/decode-map\";\nimport { invertColor } from \"../utils/color\";\n\nexport type Props = {\n  source: SourceType;\n  mappings: Array<DecodedMapping>;\n  hoveredMapping: number;\n  onHoverMapping: (mappingIndex: number) => any;\n  selectedMapping: number;\n  onSelectMapping: (mappingIndex: number) => any;\n  generated: string;\n};\n\nexport default function SourcePreview(props: Props) {\n  let {\n    source,\n    mappings,\n    hoveredMapping,\n    onHoverMapping,\n    selectedMapping,\n    onSelectMapping,\n    generated,\n  } = props;\n\n  let renderableMappings = React.useMemo(() => {\n    let result = [[]];\n    let currColumn = 0;\n    let currValue = {\n      value: \"\",\n      mapping: null,\n      mappingIndex: -1,\n    };\n    let i = 0;\n    for (let char of source.content) {\n      let currLine = result.length - 1;\n      if (char === \"\\n\") {\n        if (currValue.value) {\n          result[currLine].push(currValue);\n          currValue = {\n            value: \"\",\n            mapping: null,\n            mappingIndex: -1,\n          };\n        }\n\n        result.push([]);\n        currColumn = 0;\n        continue;\n      }\n\n      let currMapping = mappings[i];\n      if (\n        currMapping.originalLine === currLine &&\n        currMapping.originalColumn === currColumn\n      ) {\n        if (currValue.value) {\n          result[currLine].push(currValue);\n        }\n\n        currValue = {\n          value: \"\",\n          mapping: currMapping,\n          mappingIndex: i,\n        };\n      }\n\n      while (\n        i < mappings.length - 1 &&\n        (currMapping.originalLine < currLine ||\n          (currMapping.originalLine === currLine &&\n            currMapping.originalColumn < currColumn) ||\n          (currMapping.originalLine === currLine &&\n            currMapping.originalColumn === currColumn))\n      ) {\n        i++;\n        currMapping = mappings[i];\n      }\n\n      currValue.value += char;\n\n      currColumn++;\n    }\n\n    return result;\n  }, [source.name]);\n\n  let generatedFragment = React.useMemo(() => {\n    if (selectedMapping < 0) {\n      return null;\n    }\n\n    let m = mappings[selectedMapping];\n    let nextMapping = mappings[selectedMapping + 1];\n    if (nextMapping && nextMapping.generatedLine !== m.generatedLine) {\n      nextMapping = null;\n    }\n    let parts = [\"\", \"\", \"\"];\n    let lines = generated.split(\"\\n\");\n    let currChar = 0;\n    for (let c of lines[m.generatedLine]) {\n      if (currChar < m.generatedColumn) {\n        parts[0] += c;\n      } else if (nextMapping && currChar > nextMapping.generatedColumn) {\n        parts[2] += c;\n      } else {\n        parts[1] += c;\n      }\n\n      currChar++;\n    }\n\n    return {\n      line: m.originalLine,\n      parts: [parts[0].slice(-20), parts[1], parts[2].slice(0, 20)],\n    };\n  }, [selectedMapping]);\n\n  let lines = source.content.split(\"\\n\");\n  let lineNumberWidth = lines.length.toString(10).length + 1;\n  let lastMappingColor = 0;\n  return (\n    <div className=\"w-full h-full flex flex-col font-mono text-sm\">\n      {renderableMappings.map((m, i) => {\n        return (\n          <React.Fragment key={`line-${i}`}>\n            <div className=\"flex flex-row\">\n              <div\n                className=\"text-right px-2 bg-gray-200\"\n                style={{ width: `${lineNumberWidth}rem` }}\n              >\n                {i}\n              </div>\n              <div className=\"px-4 whitespace-pre\">\n                {m.map((map, x) => {\n                  let style: any = {};\n                  if (map.mapping) {\n                    style.backgroundColor =\n                      colors[lastMappingColor % 5000][lastMappingColor % 5];\n                    style.color = invertColor(style.backgroundColor);\n\n                    if (map.mappingIndex > -1) {\n                      if (selectedMapping === map.mappingIndex) {\n                        style.backgroundColor = \"#000000\";\n                        style.color = \"#ffffff\";\n                      } else if (hoveredMapping === map.mappingIndex) {\n                        style.backgroundColor = color(\n                          style.backgroundColor\n                        ).darken(0.25);\n                      }\n                    }\n\n                    lastMappingColor++;\n                  }\n\n                  return (\n                    <span\n                      key={`line-${i}-mapping-${x}`}\n                      className={classNames(\"rounded\", {\n                        \"cursor-pointer\": !!map.mapping,\n                        \"text-gray-600\": !map.mapping,\n                      })}\n                      style={style}\n                      onMouseEnter={() => {\n                        if (map.mappingIndex > -1) {\n                          onHoverMapping(map.mappingIndex);\n                        }\n                      }}\n                      onMouseLeave={() => onHoverMapping(-1)}\n                      onClick={() => {\n                        if (map.mappingIndex > -1) {\n                          onSelectMapping(map.mappingIndex);\n                        }\n                      }}\n                    >\n                      {map.value}\n                    </span>\n                  );\n                })}\n              </div>\n            </div>\n            {generatedFragment && generatedFragment.line === i && (\n              <div className=\"p-2\">\n                <span className=\"text-gray-500\">\n                  {generatedFragment.parts[0]}\n                </span>\n                <span className=\"bg-black text-white\">\n                  {generatedFragment.parts[1] || '[NOT FOUND]'}\n                </span>\n                <span className=\"text-gray-500\">\n                  {generatedFragment.parts[2]}\n                </span>\n              </div>\n            )}\n          </React.Fragment>\n        );\n      })}\n      <div className=\"flex flex-row h-full\">\n        <div\n          className=\"flex px-2 bg-gray-200\"\n          style={{ width: `${lineNumberWidth}rem` }}\n        />\n        <div />\n      </div>\n    </div>\n  );\n}\n","export const invertColor = (hex) => {\n  if (hex.indexOf(\"#\") === 0) {\n    hex = hex.slice(1);\n  }\n\n  // convert 3-digit hex to 6-digits.\n  if (hex.length === 3) {\n    hex = hex[0] + hex[0] + hex[1] + hex[1] + hex[2] + hex[2];\n  }\n\n  if (hex.length !== 6) {\n    throw new Error(\"Invalid HEX color.\");\n  }\n\n  var r = parseInt(hex.slice(0, 2), 16),\n    g = parseInt(hex.slice(2, 4), 16),\n    b = parseInt(hex.slice(4, 6), 16);\n\n  return r * 0.299 + g * 0.587 + b * 0.114 > 186 ? \"#000000\" : \"#FFFFFF\";\n};\n","import React from \"preact/compat\";\n\nimport { decodeMap } from \"../utils/decode-map\";\nimport { SourceMapType } from \"../types\";\nimport SourceSelector from \"./source-selector\";\nimport MappingTree from \"./mapping-tree\";\nimport SourcePreview from \"./source-preview\";\n\n// This is just a variable to be able to sort\n// it's not the best way but it was the easiest way I came up with in 5 secs\nconst MAX_LINE_LENGTH = 10000;\n\nexport type Props = {\n  sourcemap: SourceMapType;\n};\n\nexport default function SourceMap(props: Props) {\n  let { sourcemap } = props;\n  let [selectedSourceIndex, setSelectedSourceIndex] = React.useState(0);\n  let [hoveredMapping, setHoveredMapping] = React.useState(-1);\n  let [selectedMapping, setSelectedMapping] = React.useState(-1);\n  let decodedMappings = React.useMemo(\n    () => decodeMap(sourcemap.mappings, sourcemap.names),\n    [sourcemap.mappings]\n  );\n\n  let filteredMappings = React.useMemo(\n    () =>\n      decodedMappings\n        .filter((m) => {\n          return m.sourceIndex === selectedSourceIndex;\n        })\n        .sort((a, b) => {\n          let aValue =\n            a.originalLine != null\n              ? a.originalLine * MAX_LINE_LENGTH + a.originalColumn\n              : Number.MAX_VALUE;\n          let bValue =\n            b.originalLine != null\n              ? b.originalLine * MAX_LINE_LENGTH + b.originalColumn\n              : Number.MAX_VALUE;\n          return aValue - bValue;\n        }),\n    [selectedSourceIndex]\n  );\n\n  const changeSourceIndex = (i: number) => {\n    setSelectedMapping(-1);\n    setHoveredMapping(-1);\n    setSelectedSourceIndex(i);\n  };\n\n  let selectedSource = sourcemap.sources[selectedSourceIndex];\n  return (\n    <div className=\"h-full min-h-0 flex\">\n      <div className=\"w-1/6\">\n        <SourceSelector\n          selectedSource={selectedSourceIndex}\n          onSelect={changeSourceIndex}\n          sources={sourcemap.sources}\n        />\n      </div>\n      <div className=\"w-4/6 overflow-y-auto\">\n        {selectedSource.content ? (\n          <SourcePreview\n            source={selectedSource}\n            mappings={filteredMappings}\n            hoveredMapping={hoveredMapping}\n            onHoverMapping={setHoveredMapping}\n            selectedMapping={selectedMapping}\n            onSelectMapping={setSelectedMapping}\n            generated={sourcemap.content}\n          />\n        ) : (\n          <div className=\"p-2\">\n            No source content found for {selectedSource.name}\n          </div>\n        )}\n      </div>\n      <div className=\"w-1/6\">\n        <MappingTree\n          mappings={filteredMappings}\n          hoveredMapping={hoveredMapping}\n          onHoverMapping={setHoveredMapping}\n          selectedMapping={selectedMapping}\n          onSelectMapping={setSelectedMapping}\n        />\n      </div>\n    </div>\n  );\n}\n","import { decode } from \"sourcemap-codec\";\n\nexport type DecodedMapping = {\n  generatedLine: number;\n  generatedColumn: number;\n  originalLine: number;\n  originalColumn: number;\n  sourceIndex: number;\n  name?: string;\n};\n\nexport function decodeMap(\n  mappings: string,\n  names: Array<string>\n): Array<DecodedMapping> {\n  let decoded = decode(mappings);\n\n  let currentLine = 0;\n  let result: Array<DecodedMapping> = [];\n  for (let line of decoded) {\n    for (let mapping of line) {\n      let hasSource = mapping.length > 1;\n      let hasName = mapping.length > 4;\n\n      result.push({\n        generatedLine: currentLine,\n        generatedColumn: mapping[0],\n        originalLine: hasSource ? mapping[2] : -1,\n        originalColumn: hasSource ? mapping[3] : -1,\n        sourceIndex: hasSource ? mapping[1] : -1,\n        name: hasName ? names[mapping[4]] : null,\n      });\n    }\n\n    currentLine++;\n  }\n\n  return result;\n}\n","import React from \"preact/compat\";\nimport { SourceMapType } from \"../types\";\nimport SourceMap from \"./sourcemap\";\n\nexport type Props = {\n  sourcemapContent: Array<SourceMapType>;\n};\n\nexport default function Visualizer({ sourcemapContent }: Props) {\n  let [selectedSourceMapIndex, setSelectedSourceMapIndex] = React.useState(0);\n\n  if (sourcemapContent.length > 0) {\n    let selectedSourceMap = sourcemapContent[selectedSourceMapIndex];\n\n    return (\n      <div id=\"sourcemap-visualizer\" className=\"font-sans leading-normal h-full flex flex-col\">\n        <div className=\"bg-gray-700 p-2 flex\">\n          <div className=\"text-white mr-4\">Select Bundle</div>\n          <select\n            className=\"border-none\"\n            onChange={(e) => {\n              setSelectedSourceMapIndex(parseInt(e.target.value, 10));\n            }}\n          >\n            {sourcemapContent.map((v, i) => {\n              return (\n                <option value={i} key={v.name}>\n                  {v.name}\n                </option>\n              );\n            })}\n          </select>\n        </div>\n        <SourceMap sourcemap={selectedSourceMap} />\n      </div>\n    );\n  }\n}\n"]}